@import url('https://fonts.googleapis.com/css2?family=Josefin+Sans:wght@400;600&family=Nunito+Sans&display=swap'); /* imported google fonts: Josefin Sans & Nunito Sans */

body {
  font-family: Nunito Sans;
  font-size: 16px;
  line-height: 1.5;

  background-color: #2222c4;
  color: #ffffff;
  margin: 80px auto 48px auto;
  width: 1120px;
}

header {
  display: flex; /* based on design the header wasn't aligned to a grid and therefore using flex is appropriate. This put the header in a line */
  align-items: center; /* aligns the nav links and header logo to the center of eachother */
  justify-content: space-between; /* this causes the nav links to shift to left side of page because it added a gap between 1. all the navigation links and the 2. company logo */
}

h1,
nav,
footer {
  font-family: Josefin Sans;
  font-size: 40px;
  font-weight: 600; /* semi-bold */
  line-height: 1.2;
}

h2 {
  font-family: Josefin Sans;
  font-size: 24px;
  font-weight: 400;
  line-height: 1.3;
  margin: 0 0 16px 0;
}

a {
  color: #ffffff;
  text-decoration: none;
  margin: 0 0 0 32px; /* gap on left hand side of each nav link */
  transition: color 1s, border-bottom 0.5s; /* transition the color and the bottom border as it relates to a:hover */
  border-bottom: 2px solid transparent;
}

a:hover,  /* links on hover */
a.selected {
  /* we added class "selected" to each HTML doc (about, contact, and index) to infer which page we are on and indicate it with color and border bottom */
  color: #e6e6e6;
  border-bottom: 2px solid #ffffff;
}

span {
  color: #ffdc00; /* adding color to span-specified text on home page */
}

section {
  margin: 80px 0 80px 0; /* top & bottom margin between individual sections */
  display: grid; /* based on design our sections were aligned to a grid and therefore using gris is appropriate */
  grid-template-columns: repeat( 12,1fr ); /* based on design we had a 12 column grid and each column is exactly the same hence 1 fraction */
  gap: 32px 32px; /*the gap refers to the gutter between the columns, 32px gap between sections in rows and 32px for sections between columns. See https://www.w3schools.com/cssref/tryit.asp?filename=trycss_grid-gap2 for visual example */
  grid-auto-flow: dense;
}

section h1 {
  grid-column: 2 / span 10; /* this puts the h1 within the section to the 2nd column of our 12 column grid and span it across 10 columns. Therfore it starts at column 2 and ends at column 12 */
  text-align: center; /* aligns our h1 text to center, as opposed to having it left hand aligned */
}

section.grid-layout a {
  grid-column: span 6; /*instead os saying "1/ span 6" (or any start column) we want the grid itself to adapt and so we just tell it to span 6 columns and thus fit in wherever it can  */
  margin: 0 0 0 0;
  border-bottom: none;
}

section.grid-layout a:hover {
  border-bottom: none;
}

section.grid-layout h2 {
  margin: 16px 0 16px 0; /* adds some margin of top and bottom for h2 and  */
}

section.grid-layout img {
  border-radius: 1%;
}

/* About page */
section.about div.photo {
  grid-column: 1 / span 4; /* start on column 1 and span 4 columns for our photo */
}

section.about div.description {
  grid-column: 7 / span 6; /* start on column 7 and span 6 columns for our description (columns 7-12) */
}

section.about h1 {
  margin: 0 0 0 0; /* without this the text won't align with the image due to margins made previously on our section */
  text-align: left; /* overwrite so text is aligned on the left otherwise it would be in the center as per previous css */
}

section.about p {
  margin: 16px 0 16px 0; /* adds 16px margin on the top and bottom between paragraphs */
}

/* Contact Page */
section.contact div.form {
  grid-column: 4 / span 6; /* start on column 4 and span 6 columns (4-9) */
}

section.contact h1 {
  text-align: left;
}

input,
textarea {
  width: 100%; 
  background-color: #2222c4;
  border: 2px dashed #ffffff;
  color: white; /*color text*/
  padding: 8px 16px 8px 16px; /*adding space inside a tag with padding (increasing internal size) rather than margin (pushing away) */
}

label {
  display: block; /* by default the label elemenet is a text element and so we switch it to a block element to actually effect its margin*/
  margin: 16px 0 16px 0; /* pushing our labels apart form eachother */
}

textarea {
  height: 320px;
}

button {
  background-color: #ffffff;
  color: #2222c4;
  border: none; /* removes default border on buttons */
  font-size: 24px;
  font-family: Josefin Sans;
  padding: 8px 16px 8px 16px;
}

input:focus, 
textarea:focus 
/* when input and textarea is foucsed on we change the color from white to pink */
{
  border: 2px dashed #f4bcbb;
}

footer {
  display: flex; /* using flex because it's not on a grid */
  align-items: center; /*aligns footer links to the center of eachother */
  justify-content: center; /*moves the links to the middle of page*/
}

footer a {
  margin: 0 32px 0 32px; /* since we have 32px margin on the left of all a tags the nav a elements are shifted to the right. In order to better center it to the page we should overwrite the margins of the footer a tags by adding margin to the right as well. However if you simply use 32px you'll have a double gap between the footer links (64px) so instead half-it (16px) to ensure it is actually 32px between them*/
}

@media (max-width: 1248px) { /* 1120px is where the site actually breaks, however given the 64px margins of the left and right side it's much more of a fluid transition if we start the media query at 1120 + (64*2) = 1248px instead */
  body {
    width: auto; /* this makes the grid flexible and adapts to a changing width*/
    margin: 80px 64px 48px 64px; /* we want the left and right to be a fixed distance from the edge instead of auto as previosuly stated in the body element and so we make it 64px while keeping the 80px & 48px on top of bottom the same as previously stated */
  }
  h1,
  nav,
  footer {
    font-size: 24px;
  }
}

@media (max-width: 920px) {
  header {
    flex-direction: column; /* so our inital header was using a flex display and we're going to keep it that due to it not being on a grid, however the default direction of flex is a row (which goes across the page) and since we're going smaller in size we want go down the page (column)  */
  }

  nav {
    margin: 32px 0 0 0; /*makes space between the nav and the company logo */
  }

  header img {
    max-width: 300px; /* makes the company logo smaller */
  }


  }
}


@media (max-width: 660px) {
  section {
    grid-template-columns: repeat(4, 1fr); /* reducing our columns from 12 to 4 */
    gap: 24px 24px; /*the gap refers to the gutter between the columns, 24px gap between sections in rows and 24px for sections between columns. See https://www.w3schools.com/cssref/tryit.asp?filename=trycss_grid-gap2 for visual example */
    margin: 64px 0 64px 0px;
  }

  nav a {
    margin: 8px 8px 0 0;
  }

  section h1,
  section.about div.photo,
  section.about div.description,
  section.contact div.form {
    grid-column: 1 / span 4; /* prior to this media query we had 12 columns but now we have 4, so to account for that we can change the grid for all of our sections to start at column 1 and span 4 columns (1-4) */
  }
}

@media (max-width: 500px) {
  body {
    margin: 32px 32px 32px 32px; /* we reduce the body margin down because it's too much on mobile */
  }

  header img {
    width: 100px; 
  }

  nav {
    display: flex; /* changing it's default layout (normal text) to flex */
    flex-direction: column; /* makes the nav go down the page instead of deafault (row) */
    align-items: center; /* this aligns the nav links in the x direction */
    justify-content: center; /* this aligns the nav links in the y direction */
  }
  
  nav a {
    margin: 8px 0 0 0 ;
  }
}
